#!/bin/bash
#### lnmp-70 v0.0.1
############################################################################
source ./initfile
############################################################################
echo -e "WebServer(Nginx)をインストールします。[y] \n"
echo -e "シェルを通している場合は [n] \n"
read optserverinst01
if [ ${optserverinst01} = "y" ] ; then
# CentOS7 httpd normal install.
yum -y install pcre-devel zlib-devel openssl-devel libxslt-devel GeoIP-devel gd-devel perl-ExtUtils-Embed gperftools-devel httpd-devel httpd mod_ssl
clear
echo "ここで一度、別のターミナルを立ち上げてください。"
echo "ユーザ権限でSSHログインし NS04_5-NGXBUILD.sh を実行して Nginx をビルドして下さい。"
echo -e " \n"
#### PHP Install.
echo -e "PHP7.0 をインストールします。\n"
yum --enablerepo=remi --enablerepo=remi-php70 install php php-cli php-devel php-mbstring php-gd php-pear php-xml php-pecl-apc php-mcrypt php-mysqli mariadb mariadb-server php-fpm
####
fi
clear
echo -e "PHP-FPMをセットアップします。\n"
cp /etc/php-fpm.d/www.conf /etc/php-fpm.d/www_conf
vim /etc/php-fpm.d/www.conf
echo -e "PHP-FPM Edit. \n"
sed -i 's|^listen = 127.0.0.1:9000|listen = /var/run/php-fpm/www.sock|g' /etc/php-fpm.d/www.conf
sed -i 's|^listen.allowed_clients = 127.0.0.1|;\0|' /etc/php-fpm.d/www.conf
sed -i "s|^;listen.owner = nobody|listen.owner = ${WEB_SERVER_SYSTEM_USER_GROUP}|g" /etc/php-fpm.d/www.conf
sed -i "s|^;listen.group = nobody|listen.group = ${WEB_SERVER_SYSTEM_USER_GROUP}|g" /etc/php-fpm.d/www.conf
sed -i "s|^user = apache$|user = ${WEB_SERVER_SYSTEM_USER_GROUP}|g" /etc/php-fpm.d/www.conf
sed -i "s|^group = apache$|group = ${WEB_SERVER_SYSTEM_USER_GROUP}|g" /etc/php-fpm.d/www.conf
sed -i 's|^;listen.mode|listen.mode|g' /etc/php-fpm.d/www.conf
sed -i 's|^pm = dynamic|pm = static|g' /etc/php-fpm.d/www.conf
sed -i "s|^pm.max_children = 50|pm.max_children = 10|g" /etc/php-fpm.d/www.conf
sed -i "s|^;pm.max_requests = 500|pm.max_requests = 500|g" /etc/php-fpm.d/www.conf
vim /etc/php-fpm.d/www.conf
# PHP.ini Edit
#
echo -e "PHP.iniを編集します。\n"
sed -i "s|^memory_limit = 128M|memory_limit = ${PHP_MEM_LIMIT}|g" /etc/php.ini
sed -i "s|^post_max_size = 8M|post_max_size = ${PHP_POST_MAX}|g" /etc/php.ini
sed -i "s|^upload_max_filesize = 2M|upload_max_filesize = ${PHP_UPLOAD_MAX}|g" /etc/php.ini
sed -i "s|^expose_php = On|expose_php = ${PHP_EXPOSE}|g" /etc/php.ini
sed -i "s|^;date.timezone =|date.timezone = \"${PHP_DATE_TIMEZONE}\"|g" /etc/php.ini
sed -i "s|^;session.cookie_secure =|session.cookie_secure = \"${PHP_SESSION_COOKIE}\"|g" /etc/php.ini
sed -i "s|^session.cookie_domain =|dsession.cookie_domain = \"${PHP_SESSION_COOKIE_DOMAIN}\"|g" /etc/php.ini
vim /etc/php.ini
####
clear
echo -e "Apacheをセットアップします。[y] \n"
echo -e "シェルを通している場合は [n] \n"
read optserverinst02
if [ ${optserverinst02} = "y" ] ; then
#########################################
echo "Apache Backend Setup."
# httpd.conf Edit.
echo -e "httpd.conf Edit.\n"
sed -i "s|^Listen 80$|Listen ${BACKEND_LISTEN_PORT}|g" ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
sed -i 's|Options Indexes FollowSymLinks$|Options -Indexes +FollowSymLinks|g' ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
sed -i "s|^ErrorLog \"logs/error_log\"$|ErrorLog \"${APACHE_LOG_DIRECTORY}/httpd_error_log\"|g" ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
sed -i "s|CustomLog \"logs/access_log\" combined$|CustomLog \"${APACHE_LOG_DIRECTORY}/httpd_access_log\" combined|g" ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
sed -i "s|^User apache$|User ${WEB_SERVER_SYSTEM_USER_GROUP}|g" ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
sed -i "s|^Group apache$|Group ${WEB_SERVER_SYSTEM_USER_GROUP}|g" ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
echo "ServerTokens Prod" >> ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
echo "KeepAlive On" >> ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
echo "ServerSignature Off" >> ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
vim ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
#
# 00-base.conf Edit.
echo -e "00-base.conf Edit.\n"
sed -i 's|^LoadModule authn_anon_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule authn_dbm_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule authz_owner_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule authz_dbm_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule status_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule userdir_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
sed -i 's|^LoadModule cache_disk_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
vim ${APACHE_MOD_CONFIG_DIRECTORY}/00-base.conf
#
# 00-dev.conf Edit.
echo -e "00-dev.conf Edit.\n"
sed -i 's|^LoadModule dav_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-dav.conf
sed -i 's|^LoadModule dav_fs_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-dav.conf
sed -i 's|^LoadModule dav_lock_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-dav.conf
vim ${APACHE_MOD_CONFIG_DIRECTORY}/00-dav.conf
#
# 00-proxy.conf Edit.
echo -e "00-proxy.conf Edit.\n"
sed -i 's|^LoadModule lbmethod_bybusyness_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule lbmethod_byrequests_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule lbmethod_bytraffic_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule lbmethod_heartbeat_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_express_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_fcgi_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_fdpass_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_scgi_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_balancer_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_ftp_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_http_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_ajp_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_connect_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
sed -i 's|^LoadModule proxy_wstunnel_module|#\0|' ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
vim ${APACHE_MOD_CONFIG_DIRECTORY}/00-proxy.conf
#
# extract_forwarded Buile.
echo -e "extract_forwarded Build.\n"
cd /usr/local/src
git clone ${APACHE_MOD_EXTRACT_FORWARDED} extract_forwarded
cd /usr/local/src/extract_forwarded
apxs -i -c -a mod_extract_forwarded.c
cd /usr/local/src/
rm -rf extract_forwarded
#
# 99-nginx.conf Create.
echo -e "99-nginx.conf Create.\n"
cat <<EOF > ${APACHE_MOD_CONFIG_DIRECTORY}/99-nginx.conf
# Proxy Mod Conflict
LoadModule extract_forwarded_module modules/mod_extract_forwarded.so
# Nginx IP Address
MEForder refuse,accept
MEFrefuse all
# Nginx Local IP
MEFaccept 127.0.0.1
EOF
vim ${APACHE_MOD_CONFIG_DIRECTORY}/99-nginx.conf
#
# extract_forwarded Comment Out.
echo -e "extract_forwarded Comment Out.\n"
sed -i 's|^LoadModule extract_forwarded_module /usr/lib64/httpd/modules/mod_extract_forwarded.so$|#\0|g' ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
vim ${APACHE_BASE_CONFIG_DIRECTORY}/httpd.conf
#
# welcome.conf Edit.
echo -e "welcome.conf Edit.\n"
sed -i 's|^<LocationMatch|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^    Options -Indexes|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^    ErrorDocument|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^</LocationMatch>|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^<Directory /usr/share/httpd/noindex>|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^    AllowOverride None|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^    Require all granted|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^</Directory>|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^Alias /.noindex.html /usr/share/httpd/noindex/index.html|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^Alias /noindex/css/bootstrap.min.css /usr/share/httpd/noindex/css/bootstrap.min.css|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^Alias /noindex/css/open-sans.css /usr/share/httpd/noindex/css/open-sans.css|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^Alias /images/apache_pb.gif /usr/share/httpd/noindex/images/apache_pb.gif|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
sed -i 's|^Alias /images/poweredby.png /usr/share/httpd/noindex/images/poweredby.png|#\0|' ${APACHE_CONFIG_DIRECTORY}/welcome.conf
vim ${APACHE_CONFIG_DIRECTORY}/welcome.conf
mkdir -p /var/www/{html,logs,error,icons,cgi-bin}
chown -R ${WEB_SERVER_SYSTEM_USER_GROUP}:${WEB_SERVER_SYSTEM_USER_GROUP} /var/www/{html,logs,error,icons,cgi-bin}
chown -R ${WEB_SERVER_SYSTEM_USER_GROUP}:${WEB_SERVER_SYSTEM_USER_GROUP} /var/lib/php/session
# Create domain.conf
echo -e "${CONFIG_HOST_DOMAIN}.conf Create.\n"
cat <<EOF > ${APACHE_CONFIG_DIRECTORY}/${CONFIG_HOST_DOMAIN}.conf
# DocumentRoot
<VirtualHost ${BACKEND_SERVER_PORT}>
  ServerName ${CONFIG_HOST_DOMAIN}:${BACKEND_LISTEN_PORT}
  DocumentRoot ${APACHE_FILE_DIRECTORY}
  ServerAdmin info@localhost
  ErrorLog ${APACHE_LOG_DIRECTORY}/httpd_${CONFIG_HOST_DOMAIN}_proxy_error_log
  TransferLog ${APACHE_LOG_DIRECTORY}/httpd_${CONFIG_HOST_DOMAIN}_proxy_access_log
</VirtualHost>
EOF
#
vim ${APACHE_CONFIG_DIRECTORY}/${CONFIG_HOST_DOMAIN}.conf
mv ${APACHE_CONFIG_DIRECTORY}/ssl.conf ${APACHE_CONFIG_DIRECTORY}/ssl_conf
######################################################################
# GeoIP DB Directory
######################################################################
cd ${GEOIP_PATH}
# GeoIP.dat mv GeoIP.dat.YYYYmmdd-IMS.bak
mv ${GEOIP_FILE} ${GEOIP_FILE}."$(date +%Y%m%d-%I%M%S).bak"
# GeoIP New Get Files
wget ${GEOIP_URL}/${GEOIP_FILE}.gz
# GeoIP.dat Gunzip
gunzip ${GEOIP_FILE}.gz
cd ${INSTALL_PATH}
####
cat <<EOF > /etc/cron.weekly/GeoIP
#!/bin/bash
# GeoIP DB Directory
cd ${GEOIP_PATH}
# GeoIP.dat mv GeoIP.dat.YYYYmmdd-IMS.bak
mv ${GEOIP_FILE} ${GEOIP_FILE}."\$(date +%Y%m%d-%I%M%S).bak"
# GeoIP New Get Files
wget ${GEOIP_URL}/${GEOIP_FILE}.gz
# GeoIP.dat Gunzip
gunzip ${GEOIP_FILE}.gz
cd
# Apache Nginx restart
systemctl restart mariadb
#systemctl restart httpd
systemctl restart php-fpm
systemctl restart nginx
EOF
vim /etc/cron.weekly/GeoIP
chmod +x /etc/cron.weekly/GeoIP
####
fi
######################################################################
echo -e "Nginxをセットアップします。[y] \n"
echo -e "シェルを通している場合は [n] \n"
read optserverinst04
if [ ${optserverinst04} = "y" ] ; then
######################################################################
# Default Setting.
######################################################################
sed -i "s|^user nginx|user ${WEB_SERVER_SYSTEM_USER_GROUP}|g" /etc/nginx/nginx.conf
sed -i "s|^error_log /var/log/nginx/error.log|error_log ${APACHE_LOG_DIRECTORY}/nginx_error.log|g" /etc/nginx/nginx.conf
sed -i "s|access_log  /var/log/nginx/access.log  main|access_log  ${APACHE_LOG_DIRECTORY}/nginx_access.log  main|g" /etc/nginx/nginx.conf
sed -i "s|keepalive_timeout   65|keepalive_timeout   ${NGINX_KEEPALIVE_TIMEOUT}|g" /etc/nginx/nginx.conf
sed -i "20a\    server_tokens       off;" /etc/nginx/nginx.conf
vim /etc/nginx/nginx.conf
# Default GZIP Setting.
cat <<EOF> ${NGINX_CONFIG_DIRECTORY}/00-gzip.conf
    gzip                    on;
    gzip_static             on;
    gzip_http_version       1.0;
    gzip_vary               on;
    gzip_comp_level         6;
    gzip_proxied            any;
    gzip_buffers            4 8k;
    gzip_types              text/plain text/xml text/css application/xhtml+xml application/xml application/rss+xml application/atom_xml application/x-javascript application/x-httpd-php;
    gzip_disable    "MSIE [1-6]\\.";
    gzip_disable    "Mozilla/4";
EOF
vim ${NGINX_CONFIG_DIRECTORY}/00-gzip.conf
#
# GeoIP Setting.
cat <<EOF > ${NGINX_CONFIG_DIRECTORY}/01-GeoIP.conf
########################################################################
# GeoIP License
# This product includes GeoLite data created by MaxMind, available from 
# URL: http://www.maxmind.com
########################################################################
    geoip_country /usr/share/GeoIP/GeoIP.dat;
    map \$geoip_country_code \$allowed_country {
      default no;
      JP yes;
    }
EOF
vim ${NGINX_CONFIG_DIRECTORY}/01-GeoIP.conf
#
# Default Proxy Setting.
cat <<EOF> ${NGINX_CONFIG_DIRECTORY}/02-proxy.conf
    # REVERSE PROXY SETUP
    # proxy_redirect        off;
    # 下記をいれていないとキャッシュが生成されない事がある。
    proxy_ignore_headers  X-Accel-Redirect X-Accel-Expires Cache-Control Expires Set-Cookie;
    proxy_cache_path      ${NGINX_PROXY_CACHE_PATH} levels=1:2 keys_zone=cache_${CONFIG_HOST_DOMAIN}:4m max_size=50m inactive=120m;
    proxy_temp_path       ${NGINX_PROXY_CACHE_TEMP};
    proxy_cache_valid     200 10m;
    proxy_cache_valid     404 5m;
    proxy_set_header      Host               \$host;
    proxy_set_header      X-Real-IP          \$remote_addr;
    proxy_set_header      X-Forwarded-Host   \$host;
    proxy_set_header      X-Forwarded-Server \$host;
    proxy_set_header      X-Forwarded-For    \$proxy_add_x_forwarded_for;
    proxy_set_header      X-Forwarded-Proto  \$scheme;
    proxy_set_header      Connection         '';
    proxy_http_version    1.1;
EOF
vim ${NGINX_CONFIG_DIRECTORY}/02-proxy.conf
#
# Default Backend Setting.
cat <<EOF> ${NGINX_CONFIG_DIRECTORY}/03-backend.conf
    #default upstream setup.
    upstream ${CONFIG_HOST_DOMAIN}.${NGINX_BACKEND_NAME} {
            ip_hash;
            server      ${BACKEND_SERVER_PORT};
            keepalive   ${NGINX_KEEPALIVE_UPSTREAM};
    }
EOF
vim ${NGINX_CONFIG_DIRECTORY}/03-backend.conf
####
echo "Header Secure Setup. \n"
cat <<EOF > /etc/nginx/conf.d/05-header.conf
# Header Secure Setup
add_header X-Frame-Options ${NGINX_HEADER_X_FRAME_OPT};
add_header X-Content-Type-Options ${NGINX_HEADER_X_CONTENT_TYPE_OPT};
add_header X-XSS-Protection "${NGINX_HEADER_X_XSS_PROTECT}";
add_header Content-Security-Policy "${NGINX_HEADER_CONTENT_SP}";
EOF
vim /etc/nginx/conf.d/05-header.conf
####
echo "Header Buffer Setup. \n"
cat <<EOF > /etc/nginx/conf.d/06-buffer.conf
client_body_buffer_size ${NGINX_CLIENT_BODY};
client_header_buffer_size ${NGINX_CLIENT_HEAD};
client_max_body_size ${NGINX_CLIENT_MAXBODY};
large_client_header_buffers ${NGINX_LARGE_CLIENT_NUM} ${NGINX_LARGE_CLIENT_HEAD};
EOF
vim /etc/nginx/conf.d/06-buffer.conf
####
clear
echo "Nginx PHP-FPM Setup. \n"
cat <<EOF > /etc/nginx/php_ssl
# PHP-FPM SSL Setting.
#
    location ~ \.php\$ {
        ## baserCMS
        #try_files           \$uri =404;
        include             /etc/nginx/fastcgi_params;
        fastcgi_pass        unix:/var/run/php-fpm/www.sock;
        fastcgi_index       index.php;
        fastcgi_param       SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param       HTTPS on;
        fastcgi_pass_header "X-Accel-Redirect";
        fastcgi_pass_header "X-Accel-Expires";
    }
EOF
#
vim /etc/nginx/php_ssl
#
######################################################################
# SSL Setting Start.
######################################################################
#
echo "Nginx Setup http/v2[y] / spdy[n]"
read nginxhttp2
####
if [ ${nginxhttp2} = "y" ] ; then
####
#
# http2 Backend Setting.
cat <<EOF> ${NGINX_CONFIG_DIRECTORY}/04-httpv2.conf
    #Sets the size of the per worker input buffer.
    http2_recv_buffer_size 256k;
EOF
vim ${NGINX_CONFIG_DIRECTORY}/04-httpv2.conf
# DH PARAM
# echo "DH PARAM"
# openssl dhparam -out ${FRONT_SSL_DH}
# chown nginx ${FRONT_SSL_DH}
# chmod 700 ${FRONT_SSL_DH}
clear
####
echo "Nginx http/v2 Setup"
cat <<EOF > ${NGINX_CONFIG_DIRECTORY}/10-${CONFIG_HOST_DOMAIN}-ssl.conf
server {
    listen      ${BACKEND_LISTEN_PORT} ssl ${NGINX_V2_MOD};
    server_name ${CONFIG_HOST_DOMAIN};

    ssl on;
    ssl_certificate      ${FRONT_SSL_CERT};
    ssl_certificate_key  ${FRONT_SSL_KEY};
    ssl_dhparam ${FRONT_SSL_DH};
    ssl_stapling         on;
    ssl_stapling_verify  on;
    ssl_trusted_certificate ${FRONT_SSLCA_CERT};
    resolver             127.0.0.1;

    ssl_session_timeout 5m;

    ssl_protocols ${ALL_SSL_PROTOCOLS};
    ssl_ciphers ${ALL_SSL_CIPHERS};
    ssl_prefer_server_ciphers on;

    #### https://kjur.github.io/jsrsasign/tool_httpscfg.html
    # Public-Key-Pinningを有効にするにはコメントアウトを外してください
    #add_header Public-Key-Pins '; max-age=5184000; includeSubDomains';

    http2_max_concurrent_streams 128;
    http2_recv_timeout 30s;
    http2_idle_timeout 3m;
    http2_chunk_size 8k;

    root   ${APACHE_FILE_DIRECTORY};
    index  ${NGINX_INDEX_FILE_LIST};
    charset ${NGINX_DEFAULT_CHARSET};

    access_log  ${APACHE_LOG_DIRECTORY}/nginx_${CONFIG_HOST_DOMAIN}_bkend.log;

    location ~ /\.(${NGINX_DENY_ALL_DIR}) { deny  all; }

    # SSL Redirect Setup
    #   
    location /(wp-admin/.*|wp-includes/.*|wp-comments/.*|wp-content/.*|wp-login\.php|wp-cron\.php) {
        index index.php index.html index.htm;
        # static files
        if (-f \$request_filename) {
            access_log  off;
            break;
        }
        # request to index.php
        if (!-e \$request_filename) {
            rewrite ^(.+)$ /index.php?q=\$1 last;
        }
    }

    # php-fpm Setup
    #
    include php_ssl;

}

server {
    listen      443 ssl ${NGINX_V2_MOD};
    server_name ${CONFIG_HOST_DOMAIN};

    ssl on;
    ssl_certificate      ${FRONT_SSL_CERT};
    ssl_certificate_key  ${FRONT_SSL_KEY};
    ssl_dhparam ${FRONT_SSL_DH};
    ssl_stapling         on;
    ssl_stapling_verify  on;
    ssl_trusted_certificate ${FRONT_SSLCA_CERT};
    resolver             127.0.0.1;

    ssl_session_timeout 5m;

    ssl_protocols ${ALL_SSL_PROTOCOLS};
    ssl_ciphers ${ALL_SSL_CIPHERS};
    ssl_prefer_server_ciphers on;

    #### https://kjur.github.io/jsrsasign/tool_httpscfg.html
    # Public-Key-Pinningを有効にするにはコメントアウトを外してください
    #add_header Public-Key-Pins '; max-age=5184000; includeSubDomains';
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    http2_max_concurrent_streams 128;
    http2_recv_timeout 30s;
    http2_idle_timeout 3m;
    http2_chunk_size 8k;

    root   ${APACHE_FILE_DIRECTORY};
    index  ${NGINX_INDEX_FILE_LIST};
    charset ${NGINX_DEFAULT_CHARSET};

    access_log  ${APACHE_LOG_DIRECTORY}/nginx_${CONFIG_HOST_DOMAIN}_ssl.log;

    location ~ /\.(${NGINX_DENY_ALL_DIR}) { deny  all; }

    location = /*\.(${NGINX_LOCATION_ASCII_FILE}) {
        access_log      ${NGINX_LOCATION_LOG};
        expires         ${NGINX_EXPIRES_DAY};
        log_not_found   ${NGINX_LOG_NOT_FOUND};
        break;
    }

    location = /*\.(${NGINX_LOCATION_BINARY_FILE}) {
        access_log      ${NGINX_LOCATION_LOG};
        expires         ${NGINX_EXPIRES_DAY};
        log_not_found   ${NGINX_LOG_NOT_FOUND};
        break;
    }

    # Proxy Setup
    location / {
        # HTTP Method Deny
        if (\$request_method !~ ^(GET|HEAD|POST)\$ ) {
            return 444;
        }
        # Cache Control
        add_header Cache-Control "public, max-age=43200";
        set \$do_not_cache       0;
        if (\$request_method != "GET") {
            set \$do_not_cache    1;
        }
        if (\$uri ~* '/(${NGINX_BACKEND_DIRECTORY})') {
            set \$do_not_cache   1;
        }
        if (\$http_user_agent ~* '(DoCoMo|J-PHONE|Vodafone|MOT-|UP\.Browser|DDIPOCKET|ASTEL|PDXGW|Palmscape|Xiino|sharp pda browser|Windows CE|L-mode|WILLCOM|SoftBank|Semulator|Vemulator|J-EMULATOR|emobile|mixi-mobile-converter)') {
            set \$do_not_cache   1;
        }
        if (\$http_user_agent ~* '(iPhone|iPod|Opera Mini|Android.*Mobile|NetFront|PSP|BlackBerry|Windows Phone)') {
            set \$do_not_cache   1;
        }
        if (\$http_cookie ~* "comment_author_|wordpress_(?!test_cookie)|wp-postpass_" ) {
            set $do_not_cache   1;
        }
        # REVERSE PROXY SETUP
        proxy_no_cache           \$do_not_cache;
        proxy_cache_bypass       \$do_not_cache;
        proxy_cache_key          "\$scheme://\$host\$request_uri";
        proxy_cache              cache_${CONFIG_HOST_DOMAIN};
        proxy_pass               ${NGINX_SCHEMA}\$host.${NGINX_BACKEND_NAME};
    }

    # SSL Admin Area Setup
    # WordPress Admin Directory
    location ~ /(${NGINX_BACKEND_DIRECTORY}) {
        access_log      off;
        proxy_pass      ${NGINX_SCHEMA}\$host.${NGINX_BACKEND_NAME};
        # GeoIP
        if (\$allowed_country != yes) {
            return 444;
        }
        allow   127.0.0.1;
        allow   ${SERVER_STATIC_IP_ADDR};
        allow   ${GLOBAL_IP_ADDR};
        deny    all;
    }

    location ~ /uploads/ {
        valid_referers    ${NGINX_REFERERS_URI};
        if (\$invalid_referers) {
            return 403;
        }
        aio threads;
    }

    # redirect server error pages to the static page /403.html
    #
    error_page  403              /403.html;
    location = /403.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /404.html
    #
    error_page  404              /404.html;
    location = /404.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # WordPress no Admin for HTTP
    if ($uri !~ '/wp-(admin|includes|cron\.php|comments|login\.php|content|author)') {
        rewrite ^(.*)?$ https://$host last;
        break;
    }

    # WordPress Config Files Access Setup
    #
    location ~ /(wp-config\.php|wp-mail\.php|install\.php|xmlrpc\.php) {
        allow   127.0.0.1;
        allow   ${SERVER_STATIC_IP_ADDR};
        deny    all;
    }
}
EOF
vim ${NGINX_CONFIG_DIRECTORY}/10-${CONFIG_HOST_DOMAIN}-ssl.conf
#
else
echo "Nginx Spdy Setup"
cat <<EOF > ${NGINX_CONFIG_DIRECTORY}/10-${CONFIG_HOST_DOMAIN}-ssl.conf
server {
    listen      ${BACKEND_LISTEN_PORT} ssl ${NGINX_SPDY_MOD};
    server_name ${CONFIG_HOST_DOMAIN};

    ssl on;
    ssl_certificate      ${FRONT_SSL_CERT};
    ssl_certificate_key  ${FRONT_SSL_KEY};
    ssl_dhparam ${FRONT_SSL_DH};
    ssl_stapling         on;
    ssl_stapling_verify  on;
    ssl_trusted_certificate ${FRONT_SSLCA_CERT};
    resolver             127.0.0.1;

    ssl_session_timeout 5m;

    ssl_protocols ${ALL_SSL_PROTOCOLS};
    ssl_ciphers ${ALL_SSL_CIPHERS};
    ssl_prefer_server_ciphers on;

    #### https://kjur.github.io/jsrsasign/tool_httpscfg.html
    # Public-Key-Pinningを有効にするにはコメントアウトを外してください
    #add_header Public-Key-Pins '; max-age=5184000; includeSubDomains';

    spdy_chunk_size             8k;
    spdy_headers_comp           9;

    root   ${APACHE_FILE_DIRECTORY};
    index  ${NGINX_INDEX_FILE_LIST};
    charset ${NGINX_DEFAULT_CHARSET};

    access_log  ${APACHE_LOG_DIRECTORY}/nginx_${CONFIG_HOST_DOMAIN}_bkend.log;

    location ~ /\.(${NGINX_DENY_ALL_DIR}) { deny  all; }

    # SSL Redirect Setup
    #   
    location /(wp-admin/.*|wp-includes/.*|wp-comments/.*|wp-content/.*|wp-login\.php|wp-cron\.php) {
        index index.php index.html index.htm;
        # static files
        if (-f \$request_filename) {
            access_log  off;
            break;
        }
        # request to index.php
        if (!-e \$request_filename) {
            rewrite ^(.+)$ /index.php?q=\$1 last;
        }
    }

    # php-fpm Setup
    #
    include php_ssl;

}

server {
    listen      443 ssl ${NGINX_SPDY_MOD};
    server_name ${CONFIG_HOST_DOMAIN};

    ssl on;
    ssl_certificate      ${FRONT_SSL_CERT};
    ssl_certificate_key  ${FRONT_SSL_KEY};
    ssl_dhparam ${FRONT_SSL_DH};
    ssl_stapling         on;
    ssl_stapling_verify  on;
    ssl_trusted_certificate ${FRONT_SSLCA_CERT};
    resolver             127.0.0.1;

    ssl_session_timeout 5m;

    ssl_protocols ${ALL_SSL_PROTOCOLS};
    ssl_ciphers ${ALL_SSL_CIPHERS};
    ssl_prefer_server_ciphers on;

    #### https://kjur.github.io/jsrsasign/tool_httpscfg.html
    # Public-Key-Pinningを有効にするにはコメントアウトを外してください
    #add_header Public-Key-Pins '; max-age=5184000; includeSubDomains';
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

    spdy_chunk_size             8k;
    spdy_headers_comp           9;

    root   ${APACHE_FILE_DIRECTORY};
    index  ${NGINX_INDEX_FILE_LIST};
    charset ${NGINX_DEFAULT_CHARSET};

    access_log  ${APACHE_LOG_DIRECTORY}/nginx_${CONFIG_HOST_DOMAIN}_ssl.log;

    location ~ /\.(${NGINX_DENY_ALL_DIR}) { deny  all; }

    location = /*\.(${NGINX_LOCATION_ASCII_FILE}) {
        access_log      ${NGINX_LOCATION_LOG};
        expires         ${NGINX_EXPIRES_DAY};
        log_not_found   ${NGINX_LOG_NOT_FOUND};
        break;
    }

    location = /*\.(${NGINX_LOCATION_BINARY_FILE}) {
        access_log      ${NGINX_LOCATION_LOG};
        expires         ${NGINX_EXPIRES_DAY};
        log_not_found   ${NGINX_LOG_NOT_FOUND};
        break;
    }

    # Proxy Setup
    location / {
        # HTTP Method Deny
        if (\$request_method !~ ^(GET|HEAD|POST)\$ ) {
            return 444;
        }
        # Cache Control
        add_header Cache-Control "public, max-age=43200";
        set \$do_not_cache       0;
        if (\$request_method != "GET") {
            set \$do_not_cache    1;
        }
        #if (\$uri ~* '/(${NGINX_BACKEND_DIRECTORY})') {
        if (\$uri !~ '/wp-(admin|includes|cron\.php|comments|login\.php|content)') {
            set \$do_not_cache   1;
        }
        if (\$http_user_agent ~* '(DoCoMo|J-PHONE|Vodafone|MOT-|UP\.Browser|DDIPOCKET|ASTEL|PDXGW|Palmscape|Xiino|sharp pda browser|Windows CE|L-mode|WILLCOM|SoftBank|Semulator|Vemulator|J-EMULATOR|emobile|mixi-mobile-converter)') {
            set \$do_not_cache   1;
        }
        if (\$http_user_agent ~* '(iPhone|iPod|Opera Mini|Android.*Mobile|NetFront|PSP|BlackBerry|Windows Phone)') {
            set \$do_not_cache   1;
        }
        if (\$http_cookie ~* "comment_author_|wordpress_(?!test_cookie)|wp-postpass_" ) {
            set $do_not_cache   1;
        }
        # REVERSE PROXY SETUP
        proxy_no_cache           \$do_not_cache;
        proxy_cache_bypass       \$do_not_cache;
        proxy_cache_key          "\$scheme://\$host\$request_uri";
        proxy_cache              cache_${CONFIG_HOST_DOMAIN};
        proxy_pass               ${NGINX_SCHEMA}\$host.${NGINX_BACKEND_NAME};
    }

    # SSL Admin Area Setup
    # WordPress Admin Directory
    location ~ /(${NGINX_BACKEND_DIRECTORY}) {
        access_log      off;
        proxy_pass      ${NGINX_SCHEMA}\$host.${NGINX_BACKEND_NAME};
        # GeoIP
        if (\$allowed_country != yes) {
            return 444;
        }
        allow   127.0.0.1;
        allow   ${SERVER_STATIC_IP_ADDR};
        allow   ${GLOBAL_IP_ADDR};
        deny    all;
    }

    # redirect server error pages to the static page /403.html
    #
    error_page  403              /403.html;
    location = /403.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /404.html
    #
    error_page  404              /404.html;
    location = /404.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # WordPress no Admin for HTTP
    if ($uri !~ '/wp-(admin|includes|cron\.php|comments|login\.php|content|author)') {
        rewrite ^(.*)?$ https://$host last;
        break;
    }

    # WordPress Config Files Access Setup
    #
    location ~ /(wp-config\.php|wp-mail\.php|install\.php|xmlrpc\.php) {
        allow   127.0.0.1;
        allow   ${SERVER_STATIC_IP_ADDR};
        deny    all;
    }

}
EOF
vim ${NGINX_CONFIG_DIRECTORY}/10-${CONFIG_HOST_DOMAIN}-ssl.conf
#
fi
####
######################################################################
# SSL Setting End.
######################################################################
#
echo -e "Rewrite Config.\n"
cat <<EOF > ${NGINX_CONFIG_DIRECTORY}/11-${CONFIG_HOST_DOMAIN}-rewrite.conf
server {
    listen      80;
    server_name ${CONFIG_HOST_DOMAIN};

    root   ${APACHE_FILE_DIRECTORY};
    index  ${NGINX_INDEX_FILE_LIST};
    charset ${NGINX_DEFAULT_CHARSET};

    access_log  ${APACHE_LOG_DIRECTORY}/nginx_${CONFIG_HOST_DOMAIN}_rewrite.log;

    location ~ /\.(${NGINX_DENY_ALL_DIR}) { deny  all; }

    location / {
        if (\$server_port = 80) {
            rewrite (.*) https://\$host\$request_uri last;
            break;
        }
    }

    # redirect server error pages to the static page /403.html
    #
    error_page  403              /403.html;
    location = /403.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /404.html
    #
    error_page  404              /404.html;
    location = /404.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   ${APACHE_ERROR_DIRECTORY};
    }

}
EOF
vim ${NGINX_CONFIG_DIRECTORY}/11-${CONFIG_HOST_DOMAIN}-rewrite.conf
######################################################################
#
/usr/sbin/nginx -t
fi
#########################################
echo -e "Logrotate and Databaseをセットアップします。[y] \n"
echo -e "シェルを通している場合は [n] \n"
read optserverinst05
if [ ${optserverinst05} = "y" ] ; then
#########################################
####
echo "Logrotate Setup."
cat <<EOF > /etc/logrotate.d/webserver
/var/www/logs/*log {
    create 0644 ${WEB_SERVER_SYSTEM_USER_GROUP} ${WEB_SERVER_SYSTEM_USER_GROUP}
    daily
    rotate 10
    missingok
    notifempty
    sharedscripts
    delaycompress
    postrotate
        /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true
        /bin/kill -USR1 `cat /run/nginx.pid 2>/dev/null` 2>/dev/null || true
    endscript
}
EOF
vim /etc/logrotate.d/webserver
#### DB
echo -e "MariaDB conf Edit."
echo "default-storage-engine=${DB_STORAGE_ENGINE}" >> /etc/my.cnf
vim /etc/my.cnf
####
#systemctl enable httpd
systemctl enable php-fpm
systemctl enable nginx
systemctl enable mariadb
#systemctl start httpd
systemctl start php-fpm
systemctl start nginx
systemctl start mariadb
####
mysql_secure_installation
####
rm -fr ${NGINX_BUILD_PATH}/rpm
rm -f ${NGINX_BUILD_PATH}/.rpmmacros
fi